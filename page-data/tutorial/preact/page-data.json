{"componentChunkName":"component---src-templates-general-js","path":"/tutorial/preact","result":{"data":{"markdownRemark":{"frontmatter":{"image":{"publicURL":"/static/TodoMVCBenchmark-364c3bf9fe56aed749064e9ef36c5a0a.png"},"title":"preactpreactpreactpreactpreact","path":"/tutorial/preact"},"html":"<h1>Quick look at Preact</h1>\n<p>As the growing advancement of the web technologies, the client web applications aims to provide user experience to as close as possible\nto the native applications (see the PWA term). This trend makes the web apps overloaded with tons of javascript code to cover\ndynamic requests and UI changes while still trying to respond on user activity in real time. The performance of user devices grows,\nmaking them able to handle more processing, but another problem might be slow internet connection causing the load of\njavascript bundles to take lots of time.</p>\n<p>Another struggle is on the side of developers. Writing complex and rich web applications in pure javascript can lead to the\npanic attacks, heart strokes, mental illnesses or at least a head aches. The cure for those problems was the rise of modern\njavascript web frameworks. </p>\n<p>Switching to any of JS frameworks reduces the need of writing lots of code comparing to pure JS, but in same time can produce other issues.\nThe \"simplest\" of them is the need of learning the conventions and components of a framework. Other issues could be the\nneed of learning new programming language (which still claims to be based on JS).<br>\nBy the end of 2019, we can juggle with almost dozens of such frameworks, where every one of them claims to be\n\"the cure for all your problems\". And here's another.</p>\n<h2>So what is the Preact?</h2>\n<blockquote>\n<p>preact - a verb, meaning <em>\"to act or perform beforehand\"</em>.</p>\n</blockquote>\n<p>Some malcontents could mumble <em>\"it's just another js framework, nothing special\"</em>.\nOnly the smallest part of that sentence might be considered as truth, because there are no components, technologies, techniques\nto write fully automated business dashboards with remote data, caching and all the fireworks within few lines of code.</p>\n<p>But the <a href=\"https://preactjs.com/\">Preact</a> is still more than worth to take a look at. Their homepage hits the eyes with a\nshort slogan:</p>\n<blockquote>\n<p>Fast 3kB alternative to React with the same modern API.</p>\n</blockquote>\n<p>The name similarity and the slogan just makes it obvious that we are dealing with something being very close to React and yes,\nthe React components can be reused in Preact, therefore the switch to Preact will be very smooth for current React developers.<br>\nPreact comes with lots of features which could be found in React like: virtual DOM, ES6 classes, functional components,\nJSX, React DevTools, HMR, SSR.</p>\n<p>The size of minified and gzipped size of Preact isn't a <a href=\"https://gist.github.com/Restuta/cda69e50a853aa64912d\">baloney</a>.\nEven the size reduction of React in its latest releases still keeps the Preact on the first place on the podium.</p>\n<p>Preact is developed under MIT license making it open-source and available for commercial use. The initial releases took places\nin mid-2015, probably making the Preact one of the youngest in JS web framework family, therefore its community isn't so big.\nThe amount of weekly downloads number of <code>react</code> package through <code>npm</code> blows other frameworks out of the water.<br>\nBut wait, isn't it that if we can reuse React components then doesnt we end up with <code>community(Preact) += community(React)</code>.</p>\n<h3>Performance</h3>\n<p>Besides having the smallest size, Preact is probably one of the fastest JS frameworks.</p>\n<p><img src=\"./TodoMVCBenchmark.png\" alt=\"preact_performance\"><br>\nYou can run this benchmark tests by yourself here: <a href=\"https://developit.github.io/preact-perf/\">https://developit.github.io/preact-perf/</a>.  </p>\n<blockquote>\n<p>Note: It uses very old version of Preact (current one is 10) and results my vary dependable on resources availability on used device.  </p>\n</blockquote>\n<h3>Installation</h3>\n<p>The recommended way of creating Preact apps is to use the dedicated <code>preact-cli</code>.<br>\nFirst make sure to have the newest version of <code>nodejs</code> and <code>npm</code> installed, then install the CLI with:</p>\n<pre><code class=\"language-text\">npm i -g preact-cli\n</code></pre>\n<p>Now the <code>preact</code> command can be executed in terminal. Running it without any arguments shows commands and their basic usage.<br>\nTo see the list of options of available commands use <code>preact &#x3C;command> -h</code>:</p>\n<pre><code class=\"language-text\">preact create -h\n</code></pre>\n<p>If will also show which options are enabled by default, to switch on an option just pass it as next argument, but the\nswitch off needs to be explicitly stated as <code>--install false</code>. </p>\n<p>For more information see the <a href=\"https://github.com/preactjs/preact-cli\">preact-cli repository</a> README file. It also covers\nthe customised configuration of preact-cli internals with <code>preact.config.js</code> file.</p>\n<h3>Creating skeleton app</h3>\n<p>The basic command syntax to generate Preact application is <code>preact create &#x3C;template> &#x3C;destination></code>, for example:</p>\n<pre><code class=\"language-text\">preact create default my-preact-app\n</code></pre>\n<p>With given arguments, this will generate the <code>my-preact-app</code> app under the directory with the same name and install the dependencies.<br>\nBy default <code>create</code> uses npm, to replace it with yarn add the <code>--yarn</code> option to create cmd.<br>\nTo see the list of official templates run <code>preact list</code>.<br>\nIf you want to use custom template take a look at tip under <a href=\"https://github.com/preactjs/preact-cli#official-templates\">Official Templates</a> section.</p>\n<blockquote>\n<p>NOTE: some of the official templates (e.g. material and simple) are using outdated Preact versions and\ndoes not include some dependencies which may result in errors when importing React components.</p>\n</blockquote>\n<p>Preact apps comes with the routing dependency (<code>preact-router</code>) and embedded compatibility layer between React as <code>preact/compat</code>,\nwhich contains components such as <code>React</code> or <code>ReactDOM</code>.</p>\n<p>Similarly to React, the <code>package.json</code>, <code>.gitignore</code> and other files are being generated, but the advantage of creating apps\nwith templates adds some starter code, which can be useful for newcomers (for example <code>netlify</code> template adds whole CMS).<br>\nThe initial structure of <code>src</code> folder generated with <code>default</code> template is:</p>\n<pre><code class=\"language-text\">src\n|   index.js\n|   manifest.json\n+---assets\n|   |   favicon.ico\n|   \\---icons //omitted the icon list to maintain readability\n+---components\n|   |   app.js\n|   \\---header\n|           index.js\n|           style.css\n+---routes\n|   +---home\n|   |       index.js\n|   |       style.css\n|   \\---profile\n|           index.js\n|           style.css\n\\---style\n        index.css\n</code></pre>\n<p>The routing based on url changes is done in <code>app.js</code>, it's possible to use optional url parameters using <code>?</code> after parameter name.\nTo handle requests of non existing paths (aka <code>404</code>) put <code>default</code> in the end of route declaration:</p>\n<pre><code>&#x3C;Home path=\"/\" /> \n&#x3C;MyCmp path=\"/showCmp/:optional?\" />\n&#x3C;div default>404! Page not found!&#x3C;/div>\n</code></pre>\n<p>For more info on routing capabilities take a look at readme on <a href=\"https://github.com/preactjs/preact-router\">preact-router</a> repository.</p>\n<h3>Custom components</h3>\n<p>Preact allows to create a set of different types of components such as functional, class and fragments.<br>\nThe lifecycle methods of components are almost identical to the ones shipped with React.<br>\nBelow is an example of custom component:</p>\n<pre><code class=\"language-jsx\" data-meta=\"harmony\">import { Component } from 'preact';\nimport style from '../home/style-netlify.css';\nimport React from 'preact/compat';\nimport { useState } from 'preact/hooks';\n\nexport default class Github extends Component {\n    state = {\n        user: '',\n        propUser: '',\n        repositories: null,\n        isLoading: false\n    };\n    loadGitData = user => {\n        this.setState({ isLoading: true, repositories: null });\n        fetch(`https://api.github.com/users/${user}`)\n            .then(response => {\n                if (response.status === 404) throw new Error();\n                return response.json();\n            })\n            .then(user => {\n                this.setState({ repositories: user.public_repos + '', isLoading: false });\n            })\n            .catch(() => this.setState({ repositories: 'err', isLoading: false }));\n    };\n    fetchUser = e => {\n        e.preventDefault();\n        this.loadGitData(this.state.user);\n    };\n    setUser = e => {\n        this.setState({ user: e.target.value, repositories: null });\n    };\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (nextProps.user !== prevState.propUser) {\n            return {\n                user: nextProps.user,\n                propUser: nextProps.user,\n                isLoading: false,\n                repositories: null\n            };\n        }\n        return null;\n    }\n    componentDidMount() {\n        if (this.state.propUser) {\n            this.loadGitData(this.state.propUser);\n        }\n    }\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.propUser &#x26;&#x26; this.state.propUser !== prevState.propUser) {\n            this.loadGitData(this.state.user);\n        }\n    }\n    render({}, { user, repositories, isLoading }) {\n        const repoText = &#x3C;span> has {repositories} repositories on Github.&#x3C;/span>;\n        const errText = &#x3C;span> was not found!&#x3C;/span>;\n        const [on, setOn] = useState(false);\n        function toggle() { setOn(!on); }\n        return (\n            &#x3C;div class={style.home}>\n                &#x3C;h1>Enter a Github user name&#x3C;/h1>\n                &#x3C;form onSubmit={this.fetchUser}>\n                    &#x3C;input tabIndex={0}\n                           type=\"text\"\n                           value={user} onChange={this.setUser}\n                    />\n                    &#x3C;button type=\"submit\">Submit&#x3C;/button>\n                &#x3C;/form>\n                { !isLoading &#x26;&#x26; !repositories &#x26;&#x26; &#x3C;h5>waiting for submit&#x3C;/h5> }\n                { isLoading &#x26;&#x26; &#x3C;h5>...fetching data...&#x3C;/h5> }\n                { repositories &#x26;&#x26;\n                    &#x3C;h3>The user &#x3C;span style={{ fontSize: 'larger' }}>{user}&#x3C;/span>\n                        { repositories !== 'err' ?\n                            repoText\n                            : errText\n                        }\n                    &#x3C;/h3>\n                }\n                &#x3C;button onClick={toggle}>Switch1!&#x3C;/button> - {on ? 'Is on!' : 'Is off!'} &#x3C;br />\n            &#x3C;/div>\n        );\n    }\n}\n</code></pre>\n<p>In this component you can see the basic usage of working with state and properties, <code>fetch</code> method, a few of component lifecycle methods,\nbasic of hooks (the useState method), conditional rendering and usage of conditional parameters (only if you will create the route to this component).<br>\nTo see it working, after you generated the skeleton app, paste the code to the <code>src/routes/github/index.js</code> and after amend the <code>app.js</code> with:</p>\n<pre><code class=\"language-jsx\" data-meta=\"harmony\">&#x3C;Router>\n    &#x3C;Github path=\"/github/:user?\" />\n    //... other routes\n&#x3C;/Router>\n</code></pre>\n<p>All of the URL parameters are passed to the component <code>props</code> object.<br>\nIf you dont want to use conditional parameter, you can pass the default value similarly to:</p>\n<pre><code class=\"language-jsx\" data-meta=\"harmony\">&#x3C;Github path=\"/github/\" user=\"proob\" />\n&#x3C;Github path=\"/github/:user\" />\n</code></pre>\n<p>Not using the optional parameter and not declaring the default value for it, will result in <code>404</code> when requesting the\n<code>/github</code> path.</p>\n<h3>Others</h3>\n<p>To change the contents of <code>index.html</code> generated while building, modify or add the <code>src/template.html</code> with content similar to: </p>\n<pre><code class=\"language-html\">&#x3C;!DOCTYPE html>\n&#x3C;html lang=\"en\">\n&#x3C;head>\n    &#x3C;meta charset=\"utf-8\">\n    &#x3C;title>&#x3C;% preact.title %>&#x3C;/title>\n    &#x3C;meta name=\"description\" content=\"Preact sample application\">\n    &#x3C;meta name=\"author\" content=\"Jaco Gaco\">\n    &#x3C;meta name=\"application-name\" content=\"Preact PWA Sample\">\n    &#x3C;meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n    &#x3C;meta name=\"mobile-web-app-capable\" content=\"yes\">\n    &#x3C;meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n    &#x3C;% preact.headEnd %>\n&#x3C;/head>\n&#x3C;body>\n&#x3C;% preact.bodyEnd %>\n&#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p>Preact is PWA ready, the <code>app.js</code> provides the shell and running build generates default service worker.<br>\nTo use your own implementation of service worker, place it in <code>src/sw.js</code>.</p>\n<p>Preact is having <a href=\"https://preactjs.com/guide/v10/getting-started\">well structured guide</a> which explains most of the\naspects and features and has a section covering the switch from React.<br>\nThe description of core <a href=\"https://github.com/preactjs/preact\">preact repository</a> contains lists of demos, starter projects\nand useful libraries.</p>\n<h2>Afterthoughts</h2>\n<p>The possibility of using templates when generating new applications can really boost up the development by using configuration and components\nprovided by the template. Being one of the fastest and smallest in size, leads to the guaranty of high performance.<br>\nLearning curve for React developers is minimal and changing the React app to Preact requires the very little configuration\nchanges. The huge base of React components can be used in Preact applications without any worries.\nPreact by default creates the project with PWA features and considering the previous factors, it makes Preact a great choice\nwhen creating modern web applications.\n<br /></p>\n<p>The sample app made with CLI having the above custom component can be found in <a href=\"https://github.com/proob/preact-sample-app\">this repo</a> (uses yarn). </p>"}},"pageContext":{"id":"5bbd0fba-7396-5345-897e-190f3a1cf91c"}}}