{"componentChunkName":"component---src-templates-general-js","path":"/articles/introduction_to_micronaut","result":{"data":{"markdownRemark":{"frontmatter":{"image":{"publicURL":"/static/jakob-owens-235219-unsplash-efffe88a49d859a3f3d67c14936feb0d.jpg"},"title":"introduction_to_micronaut","path":"/articles/introduction_to_micronaut"},"html":"<h1>Introduction to Micronaut</h1>\n<p>It's hard to say and calculate how many phones and computers are currently connected to the internet,\nconsidering the IoT devices that number is probably significantly bigger. The amount of physical users also grows every day,\nand some of users are currently having a bunch of devices with internet access.<br>\nThis leads to the need of constant growth of server infrastructures handling the requests from those devices.<br>\nThe term scalability on side of computer science stopped to be a buzz word a long time ago, but also a some time ago\npeople noticed, the vertical scaling of server infrastructure has a lot of restrictions (and can be much more expensive),\nthen the horizontal scaling.<br>\nThere are few tricks and techniques to scale out the monolithic application, but they tend to require lots additional effort\nand if the number of users of such application would quickly grow they could still not be able to handle incoming requests in reasonable time.<br>\nThe answer for such struggles is <strong>microservice architecture</strong> which can scale out easily, but again, such solution creates different issues that need to be handled.\nUsing microservice approach leads to the need of handling the orchestration, provisioning and discovery of new nodes.<br>\nThe widely used java Spring framework requires the need of using additional dependencies and bunch of configuration to allow for simple service discovery.   </p>\n<h2>Newborn in the Java family</h2>\n<p>Titular <strong>Micronaut</strong> java framework is mainly oriented on microservice architecture.<br>\nAs it <a href=\"https://micronaut.io/\">home page</a> says, it is a:</p>\n<blockquote>\n<p>A modern, JVM-based, full-stack framework for building modular, easily testable microservice and serverless applications.</p>\n</blockquote>\n<p>The first release of Micronaut framework took place in early 2018s, but besides being so fresh, it already contains lots of features.\nThe framework was build from the ground by OCI company (the one behind Grails framework).<br>\nMicronaut by default tries to provide necessary microservice system tools like:</p>\n<ul>\n<li>Dependency Injection and Inversion of Control (IoC)</li>\n<li>Sensible Defaults and Auto-Configuration</li>\n<li>Configuration and Configuration Sharing</li>\n<li>Service Discovery</li>\n<li>HTTP Routing</li>\n<li>HTTP Client with Client-Side Load Balancing</li>\n</ul>\n<p>And tries to reduce some the cons of Spring and Grails framework by having: </p>\n<ul>\n<li>Fast startup time</li>\n<li>Reduced memory footprint</li>\n<li>Minimal use of reflection</li>\n<li>Minimal use of proxies</li>\n<li>Easy Unit Testing</li>\n</ul>\n<p>Currently Micronaut supports writing the applications in <code>Java</code>, <code>Groovy</code> and <code>Kotlin</code> languages.</p>\n<h2>Main differences to Spring framework</h2>\n<p>Micronaut is natively cloud enabled, making popular cloud features quickly available in the application. </p>\n<p>The <code>jar</code> size, start-up time and memory usage of Micronaut are lower than in Spring, which makes it a better choice\nfor developing a serverless functions. The huge performance of Micronaut against Spring is caused by that, the\nannotations in Micronaut are processed at compile time, therefore it reduces the need of using reflections and creating proxy\nobjects at runtime to the minimum.</p>\n<p>Currently Spring has few advantages in side of ways the application can be configured, supports more cache providers\nand offers few more ways of management and monitoring of applications.</p>\n<h3>Installation</h3>\n<p>The preferred way of creating new Micronaut applications is through use of its command line interface.<br>\nIt can be simply installed through Sdkman or Homebrew package managers, for OSes without those (poor Windows...), the\n<a href=\"https://micronaut.io/download.html\">binary archive</a> needs to be downloaded, extracted to some <code>folder</code>. Later it requires\nto create the <code>MICRONAUT_HOME</code> environment variable, which would point to the extraction <code>folder</code>, and in the last step to update\nthe environment <code>PATH</code> with <code>%MICRONAUT_HOME%\\bin</code>.<br>\nAfter that, the <code>mn</code> command with additional parameters can be used to start creating an application skeletons.<br>\nExecuting just the <code>mn</code> without arguments will start the interactive mode.  </p>\n<p>Run the <code>mn help</code> to see available options and commands with their description.<br>\nIt's also possible to run <code>mn help &#x3C;command-name></code>, for example <code>mn help create-app</code> to see the usage, available flags\nand list of features that can be included to the new app. </p>\n<blockquote>\n<p>NOTE: make sure to enable annotation processing when working in IDE</p>\n</blockquote>\n<h3>Sample project with CLI</h3>\n<p>The simples way to create Micronaut skeleton application is to run the <code>mn create-app my-app</code>, where the last one is the project name.<br>\nThis will create the <code>my-app</code> directory and generate required project files under it.  </p>\n<p>Standard setting of Micronaut CLI, will put that project into <code>my.app</code> group and create base package with the same name.\nTo customize that behaviour the above command can be amended to <code>mn create-app my.package.my-app</code> resulting in group and\nand base package named as <code>my.package</code>.<br>\nBy default, the applications created with <code>mn</code> uses Gradle as build tool, add the option <code>--build maven</code> to <code>create-app</code> command to switch to Maven.<br>\nUsing the <code>-l</code> option can be used to change the default project language, for example to make Kotlin application run similar command to:</p>\n<pre><code>mn create-app mn-kotlin-sample -l kotlin\n</code></pre>\n<p>Similarly to Spring Initializr, the generated project will have embedded gradle wrapper, basic <code>.gitignore</code> and application properties files\nand the public class with <code>main</code> main method which launches the application in Micronaut context.<br>\nAdditionally Micronaut creates basic <code>Dockerfile</code> and <code>logback.xml</code> configurations.  </p>\n<p>To create application with custom features such command can be used:</p>\n<pre><code class=\"language-text\">mn create-app -f=elasticsearch,hibernate-jpa,junit,swagger-java mn-with-features\n</code></pre>\n<p>The <code>mn</code> generated apps comes with ShadowJar plugin and when building project also produces jar file with all dependencies (with <code>-all</code> postfix). </p>\n<h4>Additional features of CLI</h4>\n<p>Inside the Micronaut application directory, we can take even bigger advantage of using Micronaut CLI.<br>\nUnder the application dir <code>mn</code> allows to use additional commands like: <code>create-controller</code>, <code>create-bean</code>, <code>create-client</code>.<br>\nRun the <code>mn help</code> to see those command with their description on the bottom of printed output and <code>mn help &#x3C;cmd-name></code> to\nsee syntax and available options for given command name.  </p>\n<p>Running the:</p>\n<pre><code class=\"language-text\">mn create-controller pac.kage.Home\n</code></pre>\n<p>Will create <code>HomeController</code> class in <code>pack.kage</code> package with a template implementation:</p>\n<pre><code class=\"language-java\">package pac.kage;\n\nimport io.micronaut.http.MediaType;\nimport io.micronaut.http.annotation.Controller;\nimport io.micronaut.http.annotation.Get;\nimport io.micronaut.http.HttpStatus;\n\n@Controller(\"/home\")\npublic class HomeController {\n\n    @Get(\"/\")\n    public HttpStatus index() {\n        return HttpStatus.OK;\n    }\n   \n    @Get(value = \"/hello\", produces = MediaType.TEXT_PLAIN) //manually added method\n    public String hello() {\n        return \"Hello World\";\n    }\n    @Get(value = \"/{name}\")\n    public String helloWithName(String name) { //manually added method\n        return \"Hi \" + name;\n    }\n}\n</code></pre>\n<p>And in the same time it will create a corresponding test class named <code>HomeControllerTest</code>:</p>\n<pre><code class=\"language-java\">import io.micronaut.context.ApplicationContext;\nimport io.micronaut.http.HttpStatus;\nimport io.micronaut.http.client.RxHttpClient;\nimport io.micronaut.runtime.server.EmbeddedServer;\nimport io.micronaut.test.annotation.MicronautTest;\nimport org.junit.jupiter.api.Test;\nimport javax.inject.Inject;\n\n@MicronautTest\npublic class HomeControllerTest {\n    @Inject\n    EmbeddedServer embeddedServer;\n\n    @Test\n    public void testIndex() throws Exception {\n        try(RxHttpClient client = embeddedServer.getApplicationContext().createBean(RxHttpClient.class, embeddedServer.getURL())) {\n            assertEquals(HttpStatus.OK, client.toBlocking().exchange(\"/home\").status());\n        }\n    }\n}\n</code></pre>\n<p>The example command <code>mn create-client pac.kage.Hello</code> creates the:</p>\n<pre><code class=\"language-java\">@Client(\"/home\") // by default it's created without '/', which throws an exception at runtime, so remember to add the '/'\npublic interface HomeClient {\n    @Get(\"/\")\n    HttpStatus index();\n    \n    //below are manually added, to cover controller methods\n    @Get(value = \"/hello\")\n    Single&#x3C;String> hello();\n\n    @Get(value = \"/{name}\")\n    Single&#x3C;String> helloWithName(String name);\n}\n</code></pre>\n<p>Such clients become handy when writing a tests or trying to connect to another service.<br>\nFor example the value inside the <code>@Client</code> annotation can be set to external service like:</p>\n<pre><code class=\"language-java\">@Client(\"http://localhost:8081/home\")\n</code></pre>\n<p>And later used in beans, jobs, etc, for example in scheduled jobs in other services:</p>\n<pre><code class=\"language-java\">@Singleton\npublic class Job {\n    @Inject\n    HomeClient client;\n\n    @Scheduled(fixedRate = \"5s\")\n    public void process() {\n        System.out.println(client.helloWithName(\"j-labs\").blockingGet());\n    }\n}\n</code></pre>\n<h3>AOP FTW!</h3>\n<p>As mentioned earlier, one of the goals of Micronaut is to reduce the use of reflections and runtime proxies to the minimum.\nSame attitude applies to AOP patterns provided in Micronaut. Let's make an example of creating \"Around\" advice (which decorates a method behaviour) by\nmaking method execution counting aspect.<br>\nThe first needed thing is an interceptor class:</p>\n<pre><code class=\"language-java\">@Singleton //indicates that only one instance of annotated class will exist while running\npublic class LogTimeInterceptor implements MethodInterceptor&#x3C;Object,Object> {\n    private static final Logger log = LoggerFactory.getLogger(LogTImeInterceptor.class);\n\n    @Override\n    public Object intercept(MethodInvocationContext&#x3C;Object, Object> context) {\n        String prettyMethod = context.getDeclaringType().getSimpleName() + \".\" + context.getName();\n        long start = System.nanoTime();\n        Object result = context.proceed();\n        long end = System.nanoTime() - start;\n        log.info(\"Execution of \" + prettyMethod + \" took: \" + (end/1000) + \"ms.\");\n        return result;\n    }\n}\n</code></pre>\n<p>Now the annotation which injects created interceptor is needed:</p>\n<pre><code class=\"language-java\">@Retention(RUNTIME)\n@Target({ElementType.TYPE, ElementType.METHOD})\n@Around //indicates around advice\n@Type(LogTimeInterceptor.class) //this injects the interceptor\npublic @interface LogTime {\n}\n</code></pre>\n<p>Now using the <code>@LogTime</code> annotation over method will result in <code>LogTimeInterceptor.intercept</code> method being called.<br>\nUsing that annotation over class declaration will invoke the interceptor over every method in that element.</p>\n<h3>Creating multiple services at once</h3>\n<p>There few more things where Micronaut CLI can become useful, one of them is ability to create set of services/apps by\ninvoking a single command. See the example:</p>\n<pre><code class=\"language-text\">mn create-federation multiple-services -s=service1,service2,service3\n</code></pre>\n<p>This will create the <code>multiple-services</code> project with subprojects specified after the <code>-s</code> option resulting in structure:</p>\n<pre><code class=\"language-text\">Root project 'multiple-services'\n+--- Project ':service1'\n+--- Project ':service2'\n\\--- Project ':service3'\n</code></pre>\n<p>The root project gets gradle wrapper and <code>settings.gradle</code> containing includes of service projects.<br>\nEach of the services gets generated with its own build script, properties file and class containing static main method and\nother similar files to generating with <code>create-app</code> command.</p>\n<h2>Conclusion</h2>\n<p>For big companies looking for stable and mature solutions, the Micronaut framework might be hard to adopt, because of its young age,\nbut having the mature software company behind might be a factor which ensures the framework stability.\nMicronaut straightly aims to make working with microservices easy.\nUsing similar concepts and naming to Spring should downsize the learning curve.\nThe CLI of Micronaut is very powerful and allows to create project skeletons and multiple services very rapidly.<br>\nIn the growing tendency of using cloud architectures, the features provided by Micronaut makes it an good choice\nfor new projects and applications. It goal to reduce binaries size and runtime memory usage explicitly says that,\nthe cost of delivery and maintenance of applications also will be cheaper. </p>\n<p>The Micronaut <a href=\"https://guides.micronaut.io/index.html\">guides</a> contains project examples with different use cases and step-by-step instructions.<br>\nThe best source of knowledge on Micronaut features and capabilities is its <a href=\"https://docs.micronaut.io/latest/guide/index.html\">documentation</a>.</p>"}},"pageContext":{"id":"a31f074a-c15a-5fff-a420-7e856540c9ce"}}}